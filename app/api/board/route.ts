import { NextRequest, NextResponse } from 'next/server'
import { supabase } from '@/lib/supabase'
import experts from '@/data/experts.json'
import { BoardRequest, BoardResponse } from '@/types'

export async function POST(request: NextRequest) {
  try {
    const body: BoardRequest = await request.json()
    const { prompt, expertIds, flow = 'moderated' } = body

    if (!prompt || !expertIds || expertIds.length === 0) {
      return NextResponse.json(
        { error: 'Missing prompt or expertIds' },
        { status: 400 }
      )
    }

    // Fetch matching experts
    const selectedExperts = experts.filter(expert => expertIds.includes(expert.id))

    if (selectedExperts.length === 0) {
      return NextResponse.json(
        { error: 'No valid experts found' },
        { status: 400 }
      )
    }

    // Provide demo response when API key is not configured
    const content = `BOARD MEETING SUMMARY

CASE BRIEF: ${prompt}

EXPERT ANALYSIS:
${selectedExperts.map(expert => `- ${expert.name} (${expert.title}): Based on my expertise in ${expert.expertise[0]?.toLowerCase()}, I recommend focusing on strategic positioning and market opportunity. My ${expert.personality.style} approach suggests we should consider both short-term and long-term implications.`).join('\n')}

SYNTHESIS:
The board has analyzed your challenge and identified key strategic areas for consideration. We recommend a comprehensive approach that balances immediate needs with long-term sustainability.

RECOMMENDATIONS:
1. Conduct thorough market analysis
2. Develop clear implementation roadmap
3. Establish measurable success metrics
4. Monitor progress and adjust strategy as needed

This is a demo response. Configure your OpenAI API key for real AI-generated strategic analysis.`

    // Save to Supabase with enhanced metadata (optional)
    try {
      const { data: memo, error: dbError } = await supabase
        .from('memos')
        .insert([
          {
            content,
            created_at: new Date().toISOString(),
            metadata: {
              expert_count: selectedExperts.length,
              experts: selectedExperts.map(e => e.name),
              prompt_length: prompt.length,
              model: 'demo',
              tokens_used: 0,
              flow_type: flow,
              stages_completed: ['brief', 'round-robin', 'debate', 'synthesis']
            }
          }
        ])
        .select()
        .single()

      if (dbError) {
        console.error('Supabase error:', dbError)
        // Continue even if DB save fails
      }
    } catch (dbError) {
      console.error('Supabase connection error:', dbError)
      // Continue even if DB is not available
    }

    // Send to Slack with enhanced formatting
    const slackWebhookUrl = process.env.SLACK_WEBHOOK_URL
    if (slackWebhookUrl) {
      try {
        const slackMessage = {
          text: `ðŸŽ¯ *New Moderated Board Meeting Completed*`,
          blocks: [
            {
              type: "header",
              text: {
                type: "plain_text",
                text: "ðŸŽ¯ Moderated Board Meeting Results",
                emoji: true
              }
            },
            {
              type: "section",
              text: {
                type: "mrkdwn",
                text: `*Challenge:* ${prompt.substring(0, 200)}${prompt.length > 200 ? '...' : ''}`
              }
            },
            {
              type: "section",
              text: {
                type: "mrkdwn",
                text: `*Expert Team:* ${selectedExperts.map(e => e.name).join(', ')}`
              }
            },
            {
              type: "section",
              text: {
                type: "mrkdwn",
                text: `*Meeting Flow:* Case Brief â†’ Round-Robin â†’ Open Debate â†’ Synthesis Memo`
              }
            },
            {
              type: "section",
              text: {
                type: "mrkdwn",
                text: `*Strategic Analysis:*\n${content.substring(0, 1000)}${content.length > 1000 ? '...' : ''}`
              }
            },
            {
              type: "context",
              elements: [
                {
                  type: "mrkdwn",
                  text: `Generated by AI Team Board â€¢ ${new Date().toLocaleString()}`
                }
              ]
            }
          ]
        }

        await fetch(slackWebhookUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(slackMessage)
        })
      } catch (slackError) {
        console.error('Slack webhook error:', slackError)
        // Continue even if Slack fails
      }
    }

    const response: BoardResponse = {
      sessionId: `session_${Date.now()}`,
      conversationId: `conv_${Date.now()}`,
      messages: [],
      insights: [],
      actions: [],
      summary: content
    }
    return NextResponse.json(response)

  } catch (error) {
    console.error('API error:', error)
    return NextResponse.json(
      { error: 'Strategic analysis generation failed. Please try again.' },
      { status: 500 }
    )
  }
} 